/Users/karlemstrand/Documents/rlindsberg/Git/tsp/venv/bin/python /Users/karlemstrand/Documents/rlindsberg/Git/tsp/mst/visulise.py
Create graph with the following constants:
Size: 5
Degree: 2
Max Weight: 3
Max Read: 3
Graph Type: GraphType.VISUAL
Weight Distribution: WeightDistribution.VISUAL

[(0, 1), (0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
{0: {1: {'weight': 3}, 2: {'weight': 1}, 3: {'weight': 1}, 4: {'weight': 2}}, 1: {0: {'weight': 3}, 2: {'weight': 1}, 3: {'weight': 2}, 4: {'weight': 3}}, 2: {0: {'weight': 1}, 1: {'weight': 1}, 3: {'weight': 2}, 4: {'weight': 2}}, 3: {0: {'weight': 1}, 1: {'weight': 2}, 2: {'weight': 2}, 4: {'weight': 2}}, 4: {0: {'weight': 2}, 1: {'weight': 3}, 2: {'weight': 2}, 3: {'weight': 2}}}

[(0, 1, 3), (0, 2, 1), (0, 3, 1), (0, 4, 1), (1, 2, 1), (1, 3, 2), (1, 4, 3), (2, 3, 2), (2, 4, 2), (3, 4, 2)]

approx_conponents is called

############################# Searching weight 3 #############################
############################# Reading 0 of 3 #############################
Got new node 0

Sampling node 1
Sampling node 2
Sampling node 3
Sampling node 4
############################# Finished BFS #############################

3
[[], [], [], [[0, 1], [0, 2], [0, 3], [0, 4]], [], []]
############################# Searching weight 2 #############################
############################# Reading 1 of 3 #############################
Got new node 0

Sampling node 2
Sampling node 3
Sampling node 4
############################# Finished BFS #############################

2
[[], [], [[0, 2], [0, 3], [0, 4]], [[0, 1], [0, 2], [0, 3], [0, 4]], [], []]
############################# Searching weight 1 #############################
############################# Reading 1 of 3 #############################
Got new node 0

Sampling node 2
Sampling node 3
############################# Finished BFS #############################

1
[[], [[0, 2], [0, 3]], [[0, 2], [0, 3], [0, 4]], [[0, 1], [0, 2], [0, 3], [0, 4]], [], []]
############################# Searching weight 3 #############################
############################# Reading 1 of 3 #############################
Got new node 4

Sampling node 0
Sampling node 1
Sampling node 2
Sampling node 3
############################# Finished BFS #############################

3
[[], [[0, 2], [0, 3]], [[0, 2], [0, 3], [0, 4]], [[0, 1], [0, 2], [0, 3], [0, 4], [4, 0], [4, 1], [4, 2], [4, 3]], [], []]
############################# Searching weight 2 #############################
############################# Reading 2 of 3 #############################
Got new node 4

Sampling node 0
Sampling node 2
Sampling node 3
############################# Finished BFS #############################

2
[[], [[0, 2], [0, 3]], [[0, 2], [0, 3], [0, 4], [4, 0], [4, 2], [4, 3]], [[0, 1], [0, 2], [0, 3], [0, 4], [4, 0], [4, 1], [4, 2], [4, 3]], [], []]
############################# Searching weight 1 #############################
############################# Reading 2 of 3 #############################
Got new node 4

############################# Finished BFS #############################

1
[[], [[0, 2], [0, 3]], [[0, 2], [0, 3], [0, 4], [4, 0], [4, 2], [4, 3]], [[0, 1], [0, 2], [0, 3], [0, 4], [4, 0], [4, 1], [4, 2], [4, 3]], [], []]
############################# Searching weight 3 #############################
############################# Reading 2 of 3 #############################
Got new node 2

Sampling node 0
Sampling node 1
Sampling node 3
Sampling node 4
############################# Finished BFS #############################

3
[[], [[0, 2], [0, 3]], [[0, 2], [0, 3], [0, 4], [4, 0], [4, 2], [4, 3]], [[0, 1], [0, 2], [0, 3], [0, 4], [4, 0], [4, 1], [4, 2], [4, 3], [2, 0], [2, 1], [2, 3], [2, 4]], [], []]
############################# Searching weight 2 #############################
############################# Finished BFS #############################

2
[[], [[0, 2], [0, 3]], [[0, 2], [0, 3], [0, 4], [4, 0], [4, 2], [4, 3]], [[0, 1], [0, 2], [0, 3], [0, 4], [4, 0], [4, 1], [4, 2], [4, 3], [2, 0], [2, 1], [2, 3], [2, 4]], [], []]
############################# Searching weight 1 #############################
############################# Finished BFS #############################

1
[[], [[0, 2], [0, 3]], [[0, 2], [0, 3], [0, 4], [4, 0], [4, 2], [4, 3]], [[0, 1], [0, 2], [0, 3], [0, 4], [4, 0], [4, 1], [4, 2], [4, 3], [2, 0], [2, 1], [2, 3], [2, 4]], [], []]
time up
0.0006899833679199219
5
5
Results {'our_time': 0.0007150173187255859, 'kuskrall_time': 0.00011420249938964844, 'groundtruth': 5, 'approximation': 5, 'error': 0.0}


Process finished with exit code 0
